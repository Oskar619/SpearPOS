// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using SpearPOS.Models;
using System;

namespace SpearPOS.Migrations
{
    [DbContext(typeof(SpearPOSContext))]
    [Migration("20180116105323_SecondMigration")]
    partial class SecondMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("SpearPOS.Models.Ticket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ActiveDate");

                    b.Property<double>("AdvanceAmount");

                    b.Property<bool>("BarTab");

                    b.Property<DateTime>("ClosingDate");

                    b.Property<DateTime>("CreationDate");

                    b.Property<int>("CreationHour");

                    b.Property<int>("CustomerId");

                    b.Property<bool>("CustomerPickup");

                    b.Property<string>("DeliveryAddress");

                    b.Property<double>("DeliveryCharge");

                    b.Property<DateTime>("DeliveryDate");

                    b.Property<string>("DeliveryExtraInfo");

                    b.Property<bool>("DrawerReseted");

                    b.Property<int>("DriverId");

                    b.Property<double>("DueAmount");

                    b.Property<string>("GlobalId");

                    b.Property<int>("GratuityId");

                    b.Property<int>("GuestNumber");

                    b.Property<bool>("IsReOpened");

                    b.Property<bool>("IsTaxExempt");

                    b.Property<int>("OwnerId");

                    b.Property<bool>("Paid");

                    b.Property<double>("PaidAmount");

                    b.Property<bool>("Refunded");

                    b.Property<double>("ServiceCharge");

                    b.Property<bool>("Settled");

                    b.Property<int>("ShiftId");

                    b.Property<string>("Status");

                    b.Property<double>("SubTotal");

                    b.Property<long>("TableId");

                    b.Property<int>("TerminalId");

                    b.Property<string>("TicketType");

                    b.Property<double>("TotalDiscount");

                    b.Property<double>("TotalPrice");

                    b.Property<double>("TotalTax");

                    b.Property<int>("VoidByUser");

                    b.Property<string>("VoidReason");

                    b.Property<bool>("Voided");

                    b.Property<bool>("Wasted");

                    b.HasKey("Id");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("SpearPOS.Models.TicketItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Beverage");

                    b.Property<string>("CategoryName");

                    b.Property<double>("Discount");

                    b.Property<bool>("FractionalUnit");

                    b.Property<string>("GroupName");

                    b.Property<bool>("HasModifiers");

                    b.Property<bool>("InventoryHandled");

                    b.Property<int>("ItemCount");

                    b.Property<long>("ItemId");

                    b.Property<string>("ItemName");

                    b.Property<double>("ItemPrice");

                    b.Property<double>("ItemQty");

                    b.Property<double>("ItemTaxRate");

                    b.Property<string>("ItemUnitName");

                    b.Property<bool>("PrintToKitchen");

                    b.Property<bool>("PrintedToKitchen");

                    b.Property<int>("PrinterGroupId");

                    b.Property<int>("SeatNumber");

                    b.Property<int>("SizeModifierId");

                    b.Property<string>("Status");

                    b.Property<bool>("StockAmountAdjusted");

                    b.Property<double>("SubTotal");

                    b.Property<double>("SubTotalWithoutModifiers");

                    b.Property<double>("TaxAmount");

                    b.Property<double>("TaxAmountWithoutModifiers");

                    b.Property<long>("TicketId");

                    b.Property<double>("TotalPrice");

                    b.Property<double>("TotalPriceWithoutModifiers");

                    b.Property<bool>("TreatAsSeat");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketItem");
                });

            modelBuilder.Entity("SpearPOS.Models.TicketItem", b =>
                {
                    b.HasOne("SpearPOS.Models.Ticket")
                        .WithMany("Items")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
